
import com.eep.businessservice.IInventoryService;
import com.eep.businessservice.IUserService;
import com.eep.businessservice.dto.OrderItemInfo;
import com.eep.businessservice.dto.UserInfo;
import com.eep.businessservice.factory.ServiceFactory;
import com.eep.configuration.DBServer;
import java.util.List;

/**
 * ****************************************************************************
 * File:NewJFrame.java Course: 17655 Project: Assignment 2 Copyright: Copyright
 * (c) 2009 Carnegie Mellon University Versions: 1.0 November 2009 - Initial
 * rewrite of original assignment 2 (ajl).
 *
 * This class defines a GUI application that allows inventory to be added to the
 * inventory databases. There are tree tables in the inventory database: trees,
 * shrubs, and seeds.
 *
 *****************************************************************************
 */
/*
 * AddInventoryMainFrame.java
 *
 * Created on Jan 29, 2010, 9:24:23 PM
 */
/**
 *
 * @author lattanze
 */
public class InventoryMainFrame extends javax.swing.JFrame {

    String versionID = "v2.10.10";
    private IInventoryService service;
    private IUserService userService;
    private UserInfo userInfo;
    /**
     * Creates new form AddInventoryMainFrame
     */
    public InventoryMainFrame(UserInfo userInfo) {
        initComponents();
        
        if (userInfo == null) {
            dispose();
            new LoginInventoryApp().setVisible(true);
        }
        
        this.userInfo = userInfo;
        service = ServiceFactory.createInventoryService(userInfo);
        userService = ServiceFactory.createUserService(userInfo);
        jLabel1.setText("Inventory Management Application " + versionID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Trees");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Shrubs");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Seeds");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("EEPs Inventory Management Application");

        jLabel2.setText("Product ID");

        jLabel3.setText("Price");

        jLabel4.setText("Quantity");

        jTextField1.setText("localhost");

        jButton1.setText("Add Item");
        jButton1.setActionCommand("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setText("Product Description");

        jLabel6.setText("Database Server IP");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton2.setText("List Inventory");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete Item");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Decrement");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setText("Deletes item selected from list ");

        jLabel8.setText("Decrements inventory count of item selected from the list");

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setText("Genomics");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("Culture Boxes");

        buttonGroup1.add(jRadioButton6);
        jRadioButton6.setText("Processing");

        buttonGroup1.add(jRadioButton7);
        jRadioButton7.setText("Reference Material");

        btnLogout.setLabel("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(72, 72, 72)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addGap(5, 5, 5))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField3)
                                            .addComponent(jTextField4)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton1)
                                            .addComponent(jRadioButton3)
                                            .addComponent(jRadioButton2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jRadioButton4)
                                                    .addComponent(jRadioButton5, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jRadioButton6, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel7)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jRadioButton7)
                                                .addGap(171, 171, 171)
                                                .addComponent(btnLogout)
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(324, 324, 324)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 920, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton3)
                            .addComponent(jLabel3)
                            .addComponent(jRadioButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton2)
                            .addComponent(jLabel4)
                            .addComponent(jRadioButton6)))
                    .addComponent(jRadioButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton7)
                    .addComponent(btnLogout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Adds inventory to database
        Boolean connectError = false;   // Error flag
        String description;             // Tree, seed, or shrub description
        String errString;        // String for displaying errors
        Boolean fieldError = false;     // Error flag
        String msgString;        // String for displaying non-error messages
        String tableSelected = null;    // String used to determine which data table to use
        Integer quantity;               // Quantity of trees, seeds, or shrubs
        Float perUnitCost;              // Cost per tree, seed, or shrub unit
        String productID;        // Product id of tree, seed, or shrub

        // Check to make sure a radio button is selected
        jTextArea1.setText("");

        if (buttonGroup1.getSelection()== null) {
            fieldError = true;
            jTextArea1.append("\nMust select one of the radio buttons.");

        } else //Make sure there is a product description
         if (jTextField5.getText().length() == 0) {
                fieldError = true;
                jTextArea1.append("\nMust enter a product description.");

            } else //Make sure there is a product ID
             if (jTextField2.getText().length() == 0) {
                    fieldError = true;
                    jTextArea1.append("\nMust enter a product ID.");
                } else //Make sure there is a price
                 if (jTextField3.getText().length() == 0) {
                        fieldError = true;
                        jTextArea1.append("\nMust enter a product price.");
                    } else //Make sure quantity is specified
                     if (jTextField4.getText().length() == 0) {
                            fieldError = true;
                            jTextArea1.append("\nMust enter a product quantity.");
                        } // quantity // price // product ID //product description //category selected
        //Now, if there was no error in the data fields, we try to
        //connect to the database.
        if (!fieldError) {
            msgString = ">> Establishing Driver...";
            jTextArea1.setText("\n" + msgString);

            msgString = ">> Setting up URL...";
            jTextArea1.append("\n" + msgString);

            //define the data source
            String SQLServerIP = jTextField1.getText();
            DBServer.ipAddress = SQLServerIP;

            msgString = ">> Establishing connection with: " + SQLServerIP + "...";
            jTextArea1.append("\n" + msgString);
        } // fieldError check

        //If there is not connection error, then we form the SQL statement
        //and then execute it.
        if (!connectError && !fieldError) {
            try {
                // get the data from the text fields
                description = jTextField5.getText();
                productID = jTextField2.getText();
                quantity = Integer.parseInt(jTextField4.getText());
                perUnitCost = Float.parseFloat(jTextField3.getText());

                OrderItemInfo info = new OrderItemInfo();
                info.setProductCode(productID);
                info.setDescription(description);
                info.setQuantity(quantity);
                info.setPrice((double) perUnitCost);
                // if trees are selected then insert inventory into trees
                // table
                if (jRadioButton1.isSelected()) {
                    tableSelected = "TREES";
                    service.addTree(info);
                }

                // if shrubs are selected then insert inventory into shrubs
                // table
                if (jRadioButton2.isSelected()) {
                    tableSelected = "SHRUBS";
                    service.addShrub(info);
                }

                // if seeds are selected then insert inventory into seeds
                // table
                if (jRadioButton3.isSelected()) {
                    tableSelected = "SEEDS";
                    service.addSeed(info);
                }
                
                // if seeds are selected then insert inventory into culture boxes
                // table
                if (jRadioButton4.isSelected()) {
                    tableSelected = "CULTURE BOXES";
                    service.addCultureBox(info);
                }
                
                // if seeds are selected then insert inventory into genomics
                // table
                if (jRadioButton5.isSelected()) {
                    tableSelected = "GENOMICS";
                    service.addGenomic(info);
                }
                
                // if seeds are selected then insert inventory into processing
                // table
                if (jRadioButton6.isSelected()) {
                    tableSelected = "PROCESSING";
                    service.addProcessing(info);
                }
                
                // if seeds are selected then insert inventory into reference materials
                // table
                if (jRadioButton7.isSelected()) {
                    tableSelected = "REFERENCE MATERIALS";
                    service.addReferenceMaterial(info);
                }
                

                // let the user know all went well
                jTextArea1.append("\nINVENTORY UPDATED... The following was added to the " + tableSelected + " inventory...\n");
                jTextArea1.append("\nProduct Code:: " + productID);
                jTextArea1.append("\nDescription::  " + description);
                jTextArea1.append("\nQuantity::     " + quantity);
                jTextArea1.append("\nUnit Cost::    " + perUnitCost);

            } catch (Exception e) {

                errString = "\nProblem adding inventory:: " + e;
                jTextArea1.append(errString);
            } // try

        } //execute SQL check

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // This button will list the inventory for the product selected by the
        // radio button

        Boolean connectError = false;   // Error flag
        String errString;        // String for displaying errors
        Boolean fieldError = true;      // Error flag
        String msgString;        // String for displaying non-error messages
        List<OrderItemInfo> queryResult = null;
        String tableSelected = null;    // String used to determine which data table to use
        java.sql.Statement s = null;    // SQL statement pointer

        // Check to make sure a radio button is selected
        if (buttonGroup1.getSelection()!=null) {
            fieldError = false;

        } else {

            msgString = "Must select one of the radio buttons.";
            jTextArea1.setText("\n" + msgString);
        }

        //Now, we try to connect to the inventory database.
        if (!fieldError) {
            //Clear the fields - they are not needed and may cause confusion
            jTextField2.setText("");
            jTextField3.setText("");
            jTextField4.setText("");
            jTextField5.setText("");
            jTextArea1.setText("");

            msgString = ">> Establishing Driver...";
            jTextArea1.setText("\n" + msgString);

            msgString = ">> Setting up URL...";
            jTextArea1.append("\n" + msgString);

            //define the data source
            String SQLServerIP = jTextField1.getText();
            DBServer.ipAddress = SQLServerIP;

            msgString = ">> Establishing connection with: " + SQLServerIP + "...";
            jTextArea1.append("\n" + msgString);

        } // fielderror check - make sure a product is selected

        //If there is not connection error, then we form the SQL statement
        //and then execute it.
        if (!connectError && !fieldError) {
            try {
                // now we build a query to list the inventory table contents
                // for the user
                // ... here is the SQL for trees
                if (jRadioButton1.isSelected()) {
                    queryResult = service.getAllTrees();
                    tableSelected = "TREE";
                }
                // ... here is the SQL for shrubs
                if (jRadioButton2.isSelected()) {
                    queryResult = service.getAllShrubs();
                    tableSelected = "SHRUB";
                }
                // ... here is the SQL for seeds
                if (jRadioButton3.isSelected()) {
                    queryResult = service.getAllSeeds();
                    tableSelected = "SEED";
                }
                // ... here is the SQL for seeds
                if (jRadioButton4.isSelected()) {
                    queryResult = service.getAllCultureBox();
                    tableSelected = "CULTURE BOXES";
                }
                // ... here is the SQL for seeds
                if (jRadioButton5.isSelected()) {
                    queryResult = service.getAllGenomic();
                    tableSelected = "GENOMICS";
                }
                // ... here is the SQL for seeds
                if (jRadioButton6.isSelected()) {
                    queryResult = service.getAllProcessing();
                    tableSelected = "PROCESSING";
                }
                // ... here is the SQL for seeds
                if (jRadioButton7.isSelected()) {
                    queryResult = service.getAllReferenceMaterial();
                    tableSelected = "REFERENCE MATERIALS";
                }

                // Now we list the inventory for the selected table
                jTextArea1.setText("");
                for (OrderItemInfo itemInfo : queryResult) {
                    msgString = tableSelected + ">>" + itemInfo.getProductCode() + "::" + itemInfo.getDescription()
                            + " :: " + itemInfo.getPrice() + "::" + itemInfo.getQuantity();
                    jTextArea1.append("\n" + msgString);

                } // while

            } catch (Exception e) {

                errString = "\nProblem with " + tableSelected + " query:: " + e;
                jTextArea1.append(errString);

            } // try
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Deletes an item from the database

        int beginIndex;                     // Parsing index
        int endIndex;                       // Parsing index
        String productID = null;            // Product ID pnemonic
        Boolean IndexNotFound;              // Flag indicating a string index was not found.
        String errString;            // String for displaying errors
        java.sql.Statement s = null;        // SQL statement pointer
        String inventorySelection;   // Inventory text string selected by user
        IndexNotFound = false;              // Flag indicating that a string index was not found

        // this is the selected line of text
        inventorySelection = jTextArea1.getSelectedText();

        // make sure the selection is not blank
        if (inventorySelection != null) {
            // get the product ID - here we get the leading index
            beginIndex = 0;
            endIndex = inventorySelection.indexOf(">>", beginIndex);

            if (endIndex < 0) {
                IndexNotFound = true;
            } else {
                beginIndex = endIndex + 2; //skip past ">>"                                
            }

            if (!IndexNotFound) {
                // Here we get the trailing index and parse out the productID
                endIndex = inventorySelection.indexOf(":", beginIndex);

                if (endIndex < 0) {
                    IndexNotFound = true;
                } else {
                    productID = inventorySelection.substring(beginIndex, endIndex);
                }
            }

            // Now we delete the inventory item indicated by the productID we
            // parsed out above from the indicated table.
            if (!IndexNotFound) {
                jTextArea1.setText("");
                jTextArea1.append("Deleting ProductID: " + productID);

                //define the data source
                String SQLServerIP = jTextField1.getText();
                DBServer.ipAddress = SQLServerIP;

                //to delete the inventory item and then execute it.
                try {
                    // if trees inventory selected
                    if (jRadioButton1.isSelected()) {
                        service.deleteTree(productID);
                    }

                    // if shrubs inventory selected
                    if (jRadioButton2.isSelected()) {
                        service.deleteShrub(productID);
                    }

                    // if seeds inventory selected
                    if (jRadioButton3.isSelected()) {
                        service.deleteSeed(productID);
                    }
                    
                    // if culture boxes inventory selected
                    if (jRadioButton4.isSelected()) {
                        service.deleteCultureBox(productID);
                    }
                    
                    // if genomics inventory selected
                    if (jRadioButton5.isSelected()) {
                        service.deleteGenomic(productID);
                    }
                    
                    // if processing inventory selected
                    if (jRadioButton6.isSelected()) {
                        service.deleteProcessing(productID);
                    }
                    
                    // if reference material inventory selected
                    if (jRadioButton7.isSelected()) {
                        service.deleteReferenceMaterial(productID);
                    }

                    // let the user know all went well
                    jTextArea1.append("\n\n" + productID + " deleted...");
                    jTextArea1.append("\n Number of items deleted: " + 1); //TODO Zhong, error handling

                } catch (Exception e) {

                    errString = "\nProblem with delete:: " + e;
                    jTextArea1.append(errString);

                } // try

            } else {

                jTextArea1.setText("");
                jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");

            }
        } else {

            jTextArea1.setText("");
            jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");

        } // Blank string check        

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Decrements the inventory count for a selected item
        int beginIndex;                     // Parsing index
        int endIndex;                       // Parsing index
        String productID = null;            // Product ID pnemonic
        Boolean IndexNotFound;              // Flag indicating a string index was not found.
        String errString;            // String for displaying errors
        String msgString;            // String for displaying non-error messages
        String tableSelected = null;        // String used to determine which data table to use
        String inventorySelection;   // Inventory text string selected by user
        IndexNotFound = false;              // Flag indicating that a string index was not found
        OrderItemInfo itemInfo = null;

        // this is the selected line of text
        inventorySelection = jTextArea1.getSelectedText();

        // make sure the selection is not blank
        if (inventorySelection != null) {
            // get the product ID - here we get the leading index
            beginIndex = 0;
            endIndex = inventorySelection.indexOf(">>", beginIndex);

            if (endIndex < 0) {
                IndexNotFound = true;
            } else {
                beginIndex = endIndex + 2; //skip past ">>"                                
            }

            if (!IndexNotFound) {
                // Here we get the trailing index and parse out the productID
                endIndex = inventorySelection.indexOf(":", beginIndex);

                if (endIndex < 0) {
                    IndexNotFound = true;
                } else {
                    productID = inventorySelection.substring(beginIndex, endIndex);
                }
            }

            // Now we decrement the inventory count of the item indicated by the productID we
            // parsed out above from the indicated table.
            if (!IndexNotFound) {
                jTextArea1.setText("");
                jTextArea1.append("Deleting ProductID: " + productID);

                //define the data source
                String SQLServerIP = jTextField1.getText();
                DBServer.ipAddress = SQLServerIP;

                //to decrement the inventory item count and then execute it.
                try {
                    // if trees inventory selected
                    if (jRadioButton1.isSelected()) {
                        itemInfo = service.decrementTree(productID);
                        tableSelected = "TREES";
                    }

                    // if shrubs inventory selected
                    if (jRadioButton2.isSelected()) {
                        itemInfo = service.decrementShrub(productID);
                        tableSelected = "SHRUBS";
                    }

                    // if seeds inventory selected
                    if (jRadioButton3.isSelected()) {
                        itemInfo = service.decrementSeed(productID);
                        tableSelected = "SEEDS";
                    }
                    
                    // if culture boxes inventory selected
                    if (jRadioButton4.isSelected()) {
                        itemInfo = service.decrementCultureBox(productID);
                        tableSelected = "CULTURE BOXES";
                    }
                    
                    // if genomics inventory selected
                    if (jRadioButton5.isSelected()) {
                        itemInfo = service.decrementGenomic(productID);
                        tableSelected = "GENOMICS";
                    }
                    
                    // if processing inventory selected
                    if (jRadioButton6.isSelected()) {
                        itemInfo = service.decrementProcessing(productID);
                        tableSelected = "PROCESSING";
                    }
                    
                    // if reference materials inventory selected
                    if (jRadioButton7.isSelected()) {
                        itemInfo = service.decrementReferenceMaterial(productID);
                        tableSelected = "REFERENCE MATERIALS";
                    }

                    jTextArea1.append("\n\n" + productID + " inventory decremented...");

                    msgString = tableSelected + ">> " + itemInfo.getProductCode() + " :: " + itemInfo.getDescription()
                            + " :: " + itemInfo.getPrice() + " :: " + itemInfo.getQuantity();
                    jTextArea1.append("\n" + msgString);

                    jTextArea1.append("\n\n Number of items updated: " + 1); //TODO Zhong, error handling

                } catch (Exception e) {

                    errString = "\nProblem with delete:: " + e;
                    jTextArea1.append(errString);

                } // try

            } else {

                jTextArea1.setText("");
                jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");

            }
        } else {

            jTextArea1.setText("");
            jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");

        } // Blank string check
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        userService.logOut(userInfo);
        dispose();
        new LoginInventoryApp().setVisible(true);
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new InventoryMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogout;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

}
